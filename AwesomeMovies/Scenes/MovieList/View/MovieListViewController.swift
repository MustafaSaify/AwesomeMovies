//
//  MovieListViewController.swift
//  AwesomeMovies
//
//  Created by Mustafa Saify on 02/02/19.
//  Copyright (c) 2019 Mustafa Saify. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListViewControllerInput: class {
    func displayMovies(viewModel: MovieList.FetchMovies.ViewModel)
    func displayFooter(viewModel: MovieList.Footer.ViewModel)
}

protocol MovieListViewControllerOutput {
    var movies: [Movie] { get set }
    var filterDetails: MovieFilterDetails { get set }
    func fetchMovies()
    func fetchNextPage()
}

class MovieListViewController: UITableViewController {
    
    var output: MovieListViewControllerOutput!
    var router: MovieListRouter!
    var movies: [MovieViewModel] = []
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        MovieListConfigurator.instance.configure(viewController: self)
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        MovieListConfigurator.instance.configure(viewController: self)
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        addFilterButton()
        fetchMoviesOnLoad()
    }
    
    fileprivate func fetchMoviesOnLoad() {
        output.fetchMovies()
    }
    
    fileprivate func addFilterButton() {
        let filterButton = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(filterButtonAction))
        navigationItem.rightBarButtonItem = filterButton
    }
    
    @objc fileprivate func filterButtonAction(sender: Any) {
        performSegue(withIdentifier: MovieListSegue.filter.rawValue, sender: sender)
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return movies.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: MovieListTableViewCell.reuseIdentifier, for: indexPath) as? MovieListTableViewCell else {
            assertionFailure("Unable to initialize cell: \(MovieListTableViewCell.reuseIdentifier)")
            return MovieListTableViewCell()
        }
        cell.configure(with: movies[indexPath.row])
        return cell
    }
    
    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if tableView.lastItemIndexPath() == indexPath {
            output.fetchNextPage()
        }
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        performSegue(withIdentifier: MovieListSegue.movieDetails.rawValue, sender: tableView.cellForRow(at: indexPath))
    }
}

extension MovieListViewController: MovieListViewControllerInput {
    
    func displayMovies(viewModel: MovieList.FetchMovies.ViewModel) {
        guard let movies = viewModel.movies else { return }
        if viewModel.append {
            append(movies: movies)
        }
        else {
            refresh(movies: movies)
        }
    }
    
    func displayFooter(viewModel: MovieList.Footer.ViewModel) {
        var footerView = tableView.tableFooterView as? MovieListFooterView
        if footerView == nil {
            footerView = Bundle.main.loadNibNamed("MovieListFooterView", owner: nil, options: [:])?.first as? MovieListFooterView
            tableView.tableFooterView = footerView
        }
        footerView?.configure(with: viewModel.footerViewModel)
    }
    
    fileprivate func append(movies: [MovieViewModel]) {
        self.movies.append(contentsOf: movies)
        tableView.reloadData()
    }
    
    fileprivate func refresh(movies: [MovieViewModel]) {
        self.movies = movies
        tableView.reloadData()
    }
}

