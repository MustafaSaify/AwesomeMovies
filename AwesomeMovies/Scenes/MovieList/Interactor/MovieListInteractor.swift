//
//  MovieListInteractor.swift
//  AwesomeMovies
//
//  Created by Mustafa Saify on 02/02/19.
//  Copyright (c) 2019 Mustafa Saify. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListInteractorInput {
    var movies: [Movie] { get set }
    func fetchMovies()
    func fetchNextPage()
}

protocol MovieListInteractorOutput {
    func presentMovies(response: MovieList.FetchMovies.Response)
    func presentFooter(response: MovieList.Footer.Response)
}

class MovieListInteractor: MovieListInteractorInput {
    
    var output: MovieListInteractorOutput!
    lazy var movies: [Movie] = []
    var filterDetails: MovieFilterDetails = MovieFilterDetails() {
        didSet {
            movies.removeAll()
            output.presentMovies(response: MovieList.FetchMovies.Response(movies: movies,
                                                                          append: false,
                                                                          imageAccess: self.imageAccess,
                                                                          error: nil))
            fetchMovies()
        }
    }
    var worker: MovieListWorker = MovieListWorker()
    
    fileprivate lazy var imageAccess: NetworkImageAccess = NetworkImageAccess(cacheTime: 24 * oneHour)
    fileprivate lazy var loadingStateMachine = self.createLoadingStateMachine()
    
    func fetchMovies() {
        loadingStateMachine.startFeed { completion in
            worker.fetchMovies(for: filterDetails, page: 1, completion: completion)
        }
    }
    
    func fetchNextPage() {
        loadingStateMachine.next()
    }
}


extension MovieListInteractor {
    
    private func createLoadingStateMachine() -> LoadingFeedStateMachine<[Movie]> {
        return LoadingFeedStateMachine() { [weak self] state in
            switch state {
            case .succeed(let movies, _):
                self?.movies.append(contentsOf: movies)
                let response = MovieList.FetchMovies.Response(movies: movies, append: true, imageAccess: self?.imageAccess, error: nil)
                self?.output.presentMovies(response: response)
            default:
                break
            }
            self?.output.presentFooter(response: MovieList.Footer.Response(state: state))
        }
    }
}
